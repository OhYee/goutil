// Code generated by GCG. DO NOT EDIT.
// Go Code Generator 0.0.7 (https://github.com/OhYee/gcg)

package bytes

import (
	"encoding/binary"
)

// FromUint8 transfer from uint8 to []byte
func FromUint8(value uint8) (b []byte) {
	b = []byte{uint8(value)}
	return
}

// FromInt8 transfer from int8 to []byte
func FromInt8(value int8) (b []byte) {
	b = []byte{uint8(value)}
	return
}

// FromUint16 transfer from uint16 to []byte
func FromUint16(value uint16) (b []byte) {
	b = make([]byte, 2)
	binary.BigEndian.PutUint16(b, uint16(value))
	return
}

// FromInt16 transfer from int16 to []byte
func FromInt16(value int16) (b []byte) {
	b = make([]byte, 2)
	binary.BigEndian.PutUint16(b, uint16(value))
	return
} // FromUint32 transfer from uint32 to []byte
func FromUint32(value uint32) (b []byte) {
	b = make([]byte, 4)
	binary.BigEndian.PutUint32(b, uint32(value))
	return
}

// FromInt32 transfer from int32 to []byte
func FromInt32(value int32) (b []byte) {
	b = make([]byte, 4)
	binary.BigEndian.PutUint32(b, uint32(value))
	return
} // FromUint64 transfer from uint64 to []byte
func FromUint64(value uint64) (b []byte) {
	b = make([]byte, 8)
	binary.BigEndian.PutUint64(b, uint64(value))
	return
}

// FromInt64 transfer from int64 to []byte
func FromInt64(value int64) (b []byte) {
	b = make([]byte, 8)
	binary.BigEndian.PutUint64(b, uint64(value))
	return
}
