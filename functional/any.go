// Code generated by GCG. DO NOT EDIT.
// Go Code Generator 0.0.7 (https://github.com/OhYee/gcg)

package fp

import ()

func AnyString(f func(string) bool, input []string) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyInt(f func(int) bool, input []int) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyInt8(f func(int8) bool, input []int8) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyInt16(f func(int16) bool, input []int16) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyInt32(f func(int32) bool, input []int32) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyInt64(f func(int64) bool, input []int64) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyUint8(f func(uint8) bool, input []uint8) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyUint16(f func(uint16) bool, input []uint16) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyUint32(f func(uint32) bool, input []uint32) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyUint64(f func(uint64) bool, input []uint64) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyFloat32(f func(float32) bool, input []float32) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyFloat64(f func(float64) bool, input []float64) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func AnyByte(f func(byte) bool, input []byte) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
func Any(f func(any) bool, input []any) (output bool) {
	output = false
	for _, data := range input {
		output = output || f(data)
		if output {
			break
		}
	}
	return
}
